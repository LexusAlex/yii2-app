Как устанавливать и разрабатывать
1. composer create-project --prefer-dist yiisoft/yii2-app-advanced yii-application
2. ./init Переключение режимов разработки, не добавлять вручную а переключаться только так

Базы данных

sporthock_dev
sporthock_prod
sporthock_test

Режимы

Production
Development
Testing

Приложения

common - общие файлы для всех приложений
backend - backend app
frontend - frontend app
console - console app
environments - environments config

------------
Миграции в окружениях

prod - ./yii migrate
dev  - ./yii migrate
test  - ./yii_test migrate

------------
git
master - долгоживущая ветка где лежит стабильный код Не нужно мержить в мастер то что не готово и не протестированно
        При релизе отмечать тегами только в master
        git tag -a v1.0 -m "Version 1.0"
    	git push --follow-tags
develop - ветвь для разработки(все сливать сюда)
feature-1234 - новая фича где 1234 - номер задачи вливать в develop Когда ветка влита и больше не нужна ее нужно удалить.

Основные команды git
git checkout -b new_branch - создать и перейти в ветку
// слияние
git checkout develop
git merge --no-ff branch-123
git branch -d branch-123 - удаление ветки

!!!Не забыть убрать права на создание файлов chmod -R 777(drwxrwxrwx) backend/views на 775(drwxrwxr-x ) для защиты директории от записи другими пользователями
Директории с каких нужно убрать доступ

backend/controllers
backend/models
backend/views
ln -s /var/www/yii2.loc/frontend/web/uploads/ /var/www/yii2.loc/backend/web/ символьные ссылки
ln -s /home/sporthoc/torg94/frontend/web/upload/ /home/sporthoc/torg94/backend/web/ на хостинге нужно указать свой путь
Продумать архитектуру проекта, то есть где хранить статику(начало положено в #6 грузим картинки пока на backend)
Анализировать и понимать что делаешь по задачам - рефлексия

Тесты
codecept

frontend/test
backend/test
common/test

1. ./yii_test migrate - создать/обновить миграции чтобы создать тестовое окружение и тестовую базу
2. codecept bootstrap - для создания структуры папок в директории /test если их нет
3. ./codeception.yml - главный конфигурационный фаил
4. Структура
    _data - данные
    acceptance - приемочные тесты
    functional - функциональные
    unit - unit тесты
5. codecept generate:test unit ModelTest генерация заготовки теста
6. codecept run unit запуск unit тестов находясь в нужной директории
7. Тесты должны быть примитивными
8. Решил остаться на родном phpunit дабы не плодить лишнего и по ходу писать тесты

Frontend
Создадим новый шаблон для всего приложения и сделаем общий чистый шаблон
Структура каталогов

Итоговые файлы
web/css
web/js
web/images
web/uploads - загруженные файлы

Исходники
source/less
source/js
source/images

gulp --tasks - список задач
модули gulp для работы
npm install --save-dev
gulp
gulp-less
gulp-cssmin
gulp-autoprefixer
gulp-rename
rimraf
gulp-rigger
gulp-newer
gulp-imagemin
imagemin-pngquant
browser-sync
gulp-notify
gulp-uglify

Подключим необходимые файлы в gulpfile.js
Пропишем основные пути
---------------
Задачи
#1 - Создание миграций и основ для таблиц record category tag tag_article
#2 - Создание и настройка CRUD операций для модели record
#3 - Создание и настройка CRUD операций для модели category
#4 - Создание и настройка CRUD операций для модели tag
#5 - Установить счетчики при создании связей на теги у таблицы Tag
#6 - Сделать загрузку файлов на сервер из тектового редактора Froala
#7 - Разобраться с тестами в yii2 и написать основные тесты
#8 - Настроить уведомления о происходящем действии в backend добавив и настроив виджет toastr
#9 - Решить где хранить статику и сделать необходимую конфигурацию, настроить символьную ссылку
#10 - Сделать форму для загрузки файлов на сервер с последующей подстановкой их куда угодно на сайте по url
#11 - Разобраться с аутентификацией и с авторизацией на бекенде
#12 - Подготовить окружение для разработки фронтенда gulp less
#13 - Создание основной структуры каталогов и задач в gulpfile.js
#14 - Шаблон главной страницы frontend
#15 - Отобразить превью статей на главной странице